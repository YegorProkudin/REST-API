{
	"info": {
		"_postman_id": "7746032e-e684-496c-92c8-a6b868478370",
		"name": "REST API (Pet)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40016331"
	},
	"item": [
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Id field is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0, \"Id should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"Name field must be a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"PhotoUrls array is present and contains at least one element\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.have.property('photoUrls').that.is.an('array').and.to.have.lengthOf.at.least(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 123546,\r\n  \"category\": {\r\n    \"id\": 123546,\r\n    \"name\": \"Charlie\"\r\n  },\r\n  \"name\": \"Charlie\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('category');",
							"    pm.expect(responseData).to.have.property('name');",
							"    pm.expect(responseData).to.have.property('photoUrls');",
							"    pm.expect(responseData).to.have.property('tags');",
							"    pm.expect(responseData).to.have.property('status');",
							"});",
							"",
							"",
							"pm.test(\"Category name is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.category.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Category name should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"PhotoUrls is an array with at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.photoUrls).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Array should have at least one element\");",
							"});",
							"",
							"",
							"pm.test(\"Tags array contains at least one tag with a non-empty name\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.tags).to.be.an('array');",
							"  responseData.tags.forEach(function(tag) {",
							"    pm.expect(tag.name).to.exist.and.to.have.lengthOf.at.least(1, \"Tag name should not be empty\");",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 123546,\r\n  \"category\": {\r\n    \"id\": 123546,\r\n    \"name\": \"Charlie\"\r\n  },\r\n  \"name\": \"Charlie\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet/123546",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet",
						"123546"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-zero positive integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.id).to.be.a('number');",
							"    pm.expect(responseData.id).to.be.above(0, \"Id should be a non-zero positive integer\");",
							"});",
							"",
							"",
							"pm.test(\"Category object has non-zero positive integer id and a non-empty name\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.category).to.exist;",
							"    pm.expect(responseData.category.id).to.be.a('number').above(0, \"Id should be a non-zero positive integer\");",
							"    pm.expect(responseData.category.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 123546,\r\n  \"category\": {\r\n    \"id\": 123546,\r\n    \"name\": \"Charlie\"\r\n  },\r\n  \"name\": \"Charlie\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has the required fields - id, category, name, photoUrls, tags, and status\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('category');",
							"    pm.expect(responseData).to.have.property('name');",
							"    pm.expect(responseData).to.have.property('photoUrls');",
							"    pm.expect(responseData).to.have.property('tags');",
							"    pm.expect(responseData).to.have.property('status');",
							"});",
							"",
							"",
							"pm.test(\"Category name is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.category.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Category name should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"PhotoUrls array should not be empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.photoUrls).to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Tags array must contain at least one element\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.tags).to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Status is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 123546,\r\n  \"category\": {\r\n    \"id\": 123546,\r\n    \"name\": \"Charlie\"\r\n  },\r\n  \"name\": \"Charlie\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet/123546",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet",
						"123546"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "PET_ID",
			"value": "var petId = pm.response.json().id;\npm.environment.set(\"PET_ID\", petId);\n",
			"type": "default"
		}
	]
}